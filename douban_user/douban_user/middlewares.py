# -*- coding: utf-8 -*-

# Define here the models for your spider middleware
#
# See documentation in:
# https://doc.scrapy.org/en/latest/topics/spider-middleware.html

from scrapy import signals
import base64
import random
from scrapy import signals


class DoubanUserSpiderMiddleware(object):
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the spider middleware does not modify the
    # passed objects.

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_spider_input(self, response, spider):
        # Called for each response that goes through the spider
        # middleware and into the spider.

        # Should return None or raise an exception.
        return None

    def process_spider_output(self, response, result, spider):
        # Called with the results returned from the Spider, after
        # it has processed the response.

        # Must return an iterable of Request, dict or Item objects.
        for i in result:
            yield i

    def process_spider_exception(self, response, exception, spider):
        # Called when a spider or process_spider_input() method
        # (from other spider middleware) raises an exception.

        # Should return either None or an iterable of Response, dict
        # or Item objects.
        pass

    def process_start_requests(self, start_requests, spider):
        # Called with the start requests of the spider, and works
        # similarly to the process_spider_output() method, except
        # that it doesnâ€™t have a response associated.

        # Must return only requests (not items).
        for r in start_requests:
            yield r

    def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)


class DoubanUserDownloaderMiddleware(object):
    # Not all methods need to be defined. If a method is not defined,
    # scrapy acts as if the downloader middleware does not modify the
    # passed objects.
    # proxyList = [
    #     '182.53.90.46:8080', '88.204.214.122:8080', '104.192.201.89:56219', '154.117.152.13:9001', '80.81.232.214:8080',
    #     '173.231.106.226:8080', '193.242.178.90:8080', '103.234.26.179:42377', '77.233.10.37:54210',
    #     '180.183.125.179:8080',
    #     '103.85.112.197:39939', '185.136.166.181:1080', '186.179.108.238:80', '103.39.237.113:8080',
    #     '202.5.37.241:33623',
    #     '117.103.2.249:58276', '119.15.90.38:53475', '193.194.107.58:61688', '36.67.66.202:35759',
    #     '180.246.222.78:8080',
    #     '45.6.92.18:8080', '182.53.197.214:48291', '185.136.166.185:1080', '212.19.20.202:45651', '85.207.92.34:8080',
    #     '93.188.208.145:50586', '178.218.104.42:32829', '176.114.205.169:55440', '151.106.58.37:1080',
    #     '201.49.73.143:92',
    #     '54.39.138.158:3128', '109.87.165.132:37023', '103.250.157.46:56599', '91.238.223.41:57420',
    #     '95.161.188.246:36184',
    #     '145.255.6.171:31252', '191.5.0.79:53281', '223.206.52.197:8080', '50.253.229.189:45725', '185.160.60.50:51996',
    #     '115.124.85.219:47450', '66.251.141.245:8080', '118.174.234.83:38006', '151.106.58.34:1080',
    #     '185.136.166.187:1080',
    #     '181.211.166.105:54314', '202.6.237.170:8080', '185.136.158.8:1080', '5.2.230.40:8080', '186.224.238.109:20183',
    #     '62.112.8.47:1080', '91.206.4.175:45125', '89.40.52.204:80', '118.174.255.6:51708', '182.52.229.8:36507',
    #     '187.189.241.217:999', '190.184.201.123:41897', '90.110.13.100:80', '103.84.254.190:51283',
    #     '103.86.186.22:31477',
    #     '101.255.51.30:3128', '1.20.101.168:50160', '1.20.99.185:51937', '177.91.195.153:8080', '201.184.104.146:8080',
    #     '77.120.3.159:8080', '1.10.186.181:41345', '43.246.139.1:47727', '186.101.205.215:60674', '125.209.99.14:33472',
    #     '1.20.100.167:60469', '213.6.139.166:36127', '96.9.72.241:51738', '103.217.156.31:8080', '189.89.248.186:20183',
    #     '101.51.141.46:57751', '188.130.230.40:8081', '203.142.68.139:8080', '195.3.141.8:21231',
    #     '223.207.110.192:8080',
    #     '62.201.222.98:55917', '185.251.241.40:51689', '119.82.253.108:42183', '185.136.166.180:1080',
    #     '189.201.211.67:3128', '149.3.91.202:3128', '213.215.135.88:41258', '118.173.232.93:40678',
    #     '113.53.91.17:47617',
    #     '186.101.205.215:60674', '62.44.16.177:42431', '103.78.211.234:8080', '213.171.45.178:49969',
    #     '178.219.170.191:8080', '151.106.58.45:1080', '103.231.218.30:60188', '46.29.152.18:37837',
    #     '201.217.246.34:8080',
    #     '1.2.169.19:41804', '183.88.192.90:8080', '178.219.170.191:8080', '139.255.87.34:8080', '95.66.142.18:46358',
    #     '80.211.226.156:80', '202.93.227.14:53281', '83.211.243.161:37059', '180.249.168.177:8080',
    #     '162.251.158.227:39525',
    #     '103.255.226.7:52142', '119.18.154.242:8080', '88.204.59.177:32666', '187.44.167.78:60786',
    #     '202.6.237.170:8080',
    #     '81.198.66.44:49006', '194.29.60.48:45416', '36.82.253.55:8080', '101.108.97.21:8080', '177.133.246.161:8080',
    #     '182.253.130.7:8080', '182.52.74.52:40256', '185.39.197.137:43006', '101.255.64.246:48276',
    #     '95.42.209.122:39115',
    #     '177.66.255.163:39790', '138.36.1.67:59669', '201.139.125.233:56223', '213.32.253.184:8080',
    #     '5.167.51.235:8080',
    #     '43.245.218.166:53281', '118.175.93.40:56168', '145.239.93.131:80', '213.207.37.214:53281',
    #     '14.232.208.88:38204',
    #     '103.197.49.106:49688', '185.136.156.132:1080', '190.214.11.50:41558', '110.74.222.97:39904',
    #     '217.24.189.131:57005', '89.42.228.10:8080', '171.100.9.126:49163', '185.233.94.105:59288',
    #     '181.112.52.26:53281',
    #     '95.174.125.34:53281', '185.132.133.92:1080', '95.78.245.148:38378', '177.36.11.241:3128', '78.130.241.7:57725',
    #     '186.148.169.82:50797', '95.87.234.190:37342', '93.142.61.63:8080', '62.192.227.94:53170', '1.10.189.141:36433',
    #     '181.115.183.170:46251', '41.162.121.130:59400', '118.175.93.115:34460', '94.177.132.38:8080',
    #     '170.238.239.39:55913', '158.46.43.144:39120', '118.175.207.129:51934', '103.242.14.68:31127',
    #     '95.165.160.18:40255', '131.196.141.11:33729', '27.112.69.69:8080', '118.174.234.20:51455',
    #     '178.219.172.9:57591',
    #     '188.191.29.15:55594', '200.229.233.209:8080', '203.153.107.166:36464', '185.82.65.48:46172', '54.37.235.13:80',
    #     '103.18.180.97:8080', '151.106.58.136:1080', '185.136.166.232:1080', '195.68.203.62:35306',
    #     '200.115.48.20:30758',
    #     '103.107.187.10:8080', '190.152.39.38:53281', '119.101.117.146:9999', '190.25.187.242:8080',
    #     '109.206.223.186:48386', '151.237.40.60:54523', '185.238.239.101:8090', '177.233.7.74:47116',
    #     '183.230.179.157:8060', '104.182.16.73:48288', '125.25.80.64:51868', '156.67.84.75:61897', '129.205.9.30:50778',
    #     '176.111.180.209:54237', '62.201.17.106:50981', '103.86.155.78:41338', '176.118.50.84:61977',
    #     '139.255.40.130:8080',
    #     '159.224.45.217:37472', '220.247.174.236:53593', '176.108.103.21:31017', '180.94.87.82:8080',
    #     '101.109.255.194:49993', '139.255.7.81:53281', '27.116.20.209:36630', '119.101.116.63:9999',
    #     '85.109.182.44:58161',
    #     '84.19.38.158:51885', '103.98.79.42:46525', '177.37.160.60:58033', '176.62.182.29:58350', '202.62.89.194:53281',
    #     '93.190.105.144:54798', '119.39.238.34:9999', '103.68.0.174:30781', '101.51.137.97:80', '118.174.220.110:39025',
    #     '202.166.202.40:80', '103.42.89.69:53281', '125.25.80.58:58656', '95.31.5.37:52820', '62.148.151.253:53570',
    #     '109.75.43.120:59771', '103.10.63.30:53281', '5.58.167.211:39112', '119.101.113.182:9999', '86.102.116.30:8080',
    #     '119.101.116.201:9999', '1.10.186.66:59389', '217.15.195.141:46298', '103.44.61.5:54611',
    #     '143.137.204.241:8080',
    #     '147.75.125.30:8181', '103.253.211.182:8080', '119.101.113.38:9999', '66.103.174.65:60971',
    #     '119.39.238.22:9999',
    #     '101.255.32.110:39965', '109.194.50.73:8080', '193.232.113.244:40412', '106.104.116.42:32260',
    #     '217.182.5.191:8080',
    #     '138.19.153.145:8118', '94.131.204.196:57952', '118.97.83.42:8080', '222.88.147.121:8060',
    #     '216.215.123.174:8080',
    #     '218.89.14.122:8060', '177.154.161.58:8080', '170.81.141.36:53281', '183.207.129.75:8080', '77.233.10.37:54210',
    #     '103.236.114.38:49638', '103.54.28.226:49415', '1.215.70.130:58772', '182.52.51.154:59416',
    #     '103.12.20.121:9000',
    #     '202.134.154.42:80', '193.234.157.214:8080', '110.34.3.144:32352', '183.237.206.92:53281',
    #     '119.101.113.197:9999',
    #     '217.30.74.187:41591', '146.196.97.226:3128', '200.12.134.93:61630', '131.0.246.154:35252',
    #     '43.245.143.186:53281',
    #     '114.106.135.34:9999', '80.87.217.6:8080', '182.23.38.244:58276', '73.242.65.73:50235', '36.55.228.6:9292'
    # ]

    @classmethod
    def from_crawler(cls, crawler):
        # This method is used by Scrapy to create your spiders.
        s = cls()
        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)
        return s

    def process_request(self, request, spider):
        # Called for each request that goes through the downloader
        # middleware.

        # Must either:
        # - return None: continue processing this request
        # - or return a Response object
        # - or return a Request object
        # - or raise IgnoreRequest: process_exception() methods of
        #   installed downloader middleware will be called
        # pro_adr = random.choice(self.proxyList)
        # print("USE PROXY -> " + pro_adr)
        # request.meta['proxy'] = "http://"+ pro_adr
        return None

    def process_response(self, request, response, spider):
        # Called with the response returned from the downloader.

        # Must either;
        # - return a Response object
        # - return a Request object
        # - or raise IgnoreRequest
        return response

    def process_exception(self, request, exception, spider):
        # Called when a download handler or a process_request()
        # (from other downloader middleware) raises an exception.

        # Must either:
        # - return None: continue processing this exception
        # - return a Response object: stops process_exception() chain
        # - return a Request object: stops process_exception() chain
        pass

    def spider_opened(self, spider):
        spider.logger.info('Spider opened: %s' % spider.name)
